---
- name: "Set dynamic vars"
  set_fact:
    tmp_file: '{{ "exec_" + query("community.general.random_string", length=12, upper=true, numbers=true, special=false)[0] | string + ".txt" }}'
    esxi_login: &esxi_login
      - hostname: '{{ vcenter_address }}'
      - username: '{{ vcenter_login }}'
      - password: '{{ vcenter_password }}'   
      - datacenter: '{{ vcenter_datacenter }}'
      - validate_certs: no  

- debug: msg="vSphere IP {{ vcenter_address }}"

- name: Add vSphere
  add_host:
    name: '{{ vcenter_address }}'
    connection: local
    ansible_connection: local

- name: Gather vSphere schema information
  community.vmware.vmware_datacenter_info:
    <<: *esxi_login
    schema: vsphere
    properties:
    - configStatus
    - overallStatus
  delegate_to: '{{ vcenter_address }}'
  register: datacenter_info

- name: Check VMWare datacenter status
  fail: msg="Vmware datacenter is not Green"
  when: "datacenter_info['datacenter_info'] is not defined or datacenter_info['datacenter_info'][0]['overallStatus'] is not defined or datacenter_info['datacenter_info'][0]['overallStatus'] != 'green'"

- name: Gather datastore information
  community.vmware.vmware_datastore_info:
    <<: *esxi_login
    schema: vsphere
    properties:
    - name
    - overallStatus
  delegate_to: '{{ vcenter_address }}'
  register: datastore_info

- name: Filter selected datastore
  set_fact:
    selected_datastore: "{{ datastore_info.datastores | json_query(jmesquery) | first }}"
  vars:
    jmesquery: "[? overallStatus==`green` && name==`{{ vcenter_datastore }}`].{Name: name, Status: overallStatus}"

- name: Check selected datastore status
  fail: msg="Vmware datastore {{ vcenter_datastore }} not exists or is not green"
  when: "selected_datastore is not defined or selected_datastore['Name'] is not defined"

- name: Create ISO directory at datastore {{ vcenter_datastore }}
  community.vmware.vsphere_file:
    <<: *esxi_login
    datastore: '{{ vcenter_datastore }}'
    path: ISO
    state: directory
  delegate_to: '{{ vcenter_address }}'

- name: Copy server2016eval.flp file to {{ vcenter_datastore }}/ISO folder
  community.vmware.vsphere_copy:
    <<: *esxi_login
    datastore: '{{ vcenter_datastore }}'
    src: server2016eval.flp
    path: ISO/server2016eval.flp
  delegate_to: '{{ vcenter_address }}'

- name: Check uploaded file
  community.vmware.vsphere_file:
    <<: *esxi_login
    datastore: '{{ vcenter_datastore }}'
    path: ISO/server2016eval.flp
    state: file
  delegate_to: '{{ vcenter_address }}'

- name: Set file path
  set_fact:
    file_path: 'ISO/{{ windows_iso }}'

- name: Check if windows ISO is already exists
  community.vmware.vsphere_file:
    <<: *esxi_login
    datastore: '{{ vcenter_datastore }}'
    path: '{{ file_path }}'
    state: file
  delegate_to: '{{ vcenter_address }}'
  ignore_errors: true
  register: iso_info

- name: Check if ISO file is already exists
  set_fact:
    iso_exists: "{{ file_path in ([ iso_info ] | json_query(jmesquery) |\
    map(attribute='Path') | list ) }}"
  vars:
    jmesquery: "[? path==`{{ file_path }}` && status==`200`].{Path: path, Status: status, Size: size}"

- name: Download ISO
  ansible.builtin.get_url:
    url: '{{ windows_iso_url }}'
    dest: './{{ windows_iso }}'
  delegate_to: '{{ vcenter_address }}'
  when: not iso_exists

- name: Copy ISO file to {{ vcenter_datastore }}/ISO folder
  community.vmware.vsphere_copy:
    <<: *esxi_login
    datastore: '{{ vcenter_datastore }}'
    src: '{{ windows_iso }}'
    path: 'ISO/{{ windows_iso }}'
  delegate_to: '{{ vcenter_address }}'
  when: not iso_exists

- name: Check uploaded ISO file
  community.vmware.vsphere_file:
    <<: *esxi_login
    datastore: '{{ vcenter_datastore }}'
    path: '{{ file_path }}'
    state: file
  delegate_to: '{{ vcenter_address }}'

- name: Create a new Server 2016 VM
  vmware_guest:
    <<: *esxi_login
    folder: /
    name: '{{ vm_name }}'
    state: present
    guest_id: windows9Server64Guest
    cdrom:
      - controller_number: 0
        unit_number: 0
        state: present
        type: iso
        iso_path: '[{{ vcenter_datastore }}] {{ file_path }}'
        start_connected: true
    disk:
    - size_gb: '{{ vm_disk_gb }}'
      type: thin
      datastore: '{{ vcenter_datastore }}'
    hardware:
      memory_mb: '{{ vm_memory_mb }}'
      num_cpus: '{{ vm_num_cpus }}'
      scsi: lsilogicsas
    networks:
    - name: '{{ vm_network }}'
      device_type: e1000
    wait_for_ip_address: no
  delegate_to: '{{ vcenter_address }}'
  register: deploy_vm

#  - debug: msg="{{deploy_vm}}"

# Power off the VM


- name: Change virtual machine's boot order and related parameters
  vmware_guest_boot_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_login }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no  
    name: '{{ vm_name }}'
    boot_delay: 1000
    enter_bios_setup: False
    boot_retry_enabled: True
    boot_retry_delay: 20000
    boot_firmware: bios
    secure_boot_enabled: False
    boot_order:
      - cdrom
      - disk
      - ethernet
      - floppy
  delegate_to: '{{ vcenter_address }}'
  register: vm_boot_order

- name: Attach Floppy to VM
  helviojunior.vmware.vmware_guest_floppy:
    <<: *esxi_login
    name: '{{ vm_name }}'
    #state: absent
    #type: none
    type: flp
    image_file: '[{{ vcenter_datastore }}] ISO/server2016eval.flp'
    start_connected: true
  delegate_to: '{{ vcenter_address }}'
  register: deploy_vm

- name: Power-On the virtual machine
  vmware_guest_powerstate:
    <<: *esxi_login
    name: '{{ vm_name }}'
    state: powered-on
  delegate_to: '{{ vcenter_address }}'
  register: powerstate

- name: Wait for VMware tools to become available 
  vmware_guest_tools_wait:
    <<: *esxi_login
    name: '{{ vm_name }}'
  delegate_to: '{{ vcenter_address }}'
  retries: 3
  delay: 15
  register: result           
  until: result is succeeded 

- name: Detach CDROM
  vmware_guest:
    <<: *esxi_login
    folder: /
    name: '{{ vm_name }}'
    state: present
    cdrom:
      - controller_number: 0
        unit_number: 0
        state: present
        type: none
        start_connected: false
  delegate_to: '{{ vcenter_address }}'
  register: deploy_vm

- name: Detach Floppy
  helviojunior.vmware.vmware_guest_floppy:
    <<: *esxi_login
    name: '{{ vm_name }}'
    state: present
    type: none
  delegate_to: '{{ vcenter_address }}'
  register: deploy_vm

- name: Creating a script to enable Remote Desktop
  copy:
    dest: '{{ tmp_file }}'
    content: |
      $NewPassword = "{{ vm_password_new }}"
      $SecPassword = ConvertTo-SecureString $NewPassword -AsPlainText -Force
      $UserAccount = Get-LocalUser -Name "Administrator"
      $UserAccount | Set-LocalUser -Password $SecPassword
  delegate_to: localhost

- name: Send a script to change password
  local_action:
    module: vmware_guest_file_operation
    <<: *esxi_login
    vm_username: Administrator
    vm_password: '@Pass123456' # the first password set by unattended script
    vm_id: '{{ vm_name }}'
    copy:
      src: '{{ tmp_file }}'
      dest: 'c:\windows\temp\exec.txt'
      overwrite: True

#As we are changing the password the ansible show an error of authentication failure
# so, we need to ignore the error
# 1 - In the previous step we already validated actual password
# 2 - In the next step we will validate the new password
- name: Change password
  local_action:
    module: vmware_vm_shell
    <<: *esxi_login
    vm_username: Administrator
    vm_password: '@Pass123456' # the first password set by unattended script
    vm_id: '{{ vm_name }}'
    vm_shell_cwd: 'c:\windows\temp\'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: '-enc JABGAGkAbABlAEQAYQB0AGEAIAA9ACAARwBlAHQALQBDAG8AbgB0AGUAbgB0ACAAZQB4AGUAYwAuAHQAeAB0AAoAJABGAGkAbABlAEQAYQB0AGEAIAB8ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuAA=='
    wait_for_process: true
  ignore_errors: true

- name: Rename Computer via vmware_vm_shell
  local_action:
    module: vmware_vm_shell
    <<: *esxi_login
    vm_username: Administrator
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: '-command "(Rename-Computer -NewName {{ vm_name }})"'
    wait_for_process: true

- name: Creating a script to enable Remote Desktop
  copy:
    dest: '{{ tmp_file }}'
    content: |
      New-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\terminal server" -Name fDenyTSConnections -Value 0 -ErrorAction SilentlyContinue | Out-Null
      Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\terminal server" -Name fDenyTSConnections -Value 0
      Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp\" -Name "UserAuthentication" -Value 1
      Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
  delegate_to: localhost

- name: Send a script to enable Remote Desktop
  local_action:
    module: vmware_guest_file_operation
    <<: *esxi_login
    vm_username: Administrator
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    copy:
      src: '{{ tmp_file }}'
      dest: 'c:\windows\temp\exec.txt'
      overwrite: True

- name: Enable Remote Desktop
  local_action:
    module: vmware_vm_shell
    <<: *esxi_login
    vm_username: Administrator
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell_cwd: 'c:\windows\temp\'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: '-enc JABGAGkAbABlAEQAYQB0AGEAIAA9ACAARwBlAHQALQBDAG8AbgB0AGUAbgB0ACAAZQB4AGUAYwAuAHQAeAB0AAoAJABGAGkAbABlAEQAYQB0AGEAIAB8ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuAA=='
    wait_for_process: true
  ignore_errors: true

- name: Delete script local copy
  file:
    state: absent
    path: '{{ tmp_file }}'
  delegate_to: localhost

- name: Reboot-Guest
  vmware_guest_powerstate:
    <<: *esxi_login 
    name: '{{ vm_name }}'
    state: reboot-guest
  delegate_to: localhost
  register: deploy

- name: Wait for 30 seconds
  wait_for: timeout=30
  delegate_to: localhost

- name: Wait for VMware tools to become available by name
  vmware_guest_tools_wait:
    <<: *esxi_login
    name: '{{ vm_name }}'
  delegate_to: '{{ vcenter_address }}'
  retries: 3
  delay: 15
  register: result           
  until: result is succeeded 

- name: Wait for 30 seconds for VMware Tools refresh
  wait_for: timeout=30
  delegate_to: localhost

- name: Find the VM's IP Address via VMware tools
  vmware_guest_info:
    <<: *esxi_login
    name: '{{ vm_name }}'
  delegate_to: '{{ vcenter_address }}'
  register: vmfacts
  retries: 30
  delay: 15
  until: vmfacts['instance'] is defined and vmfacts['instance']['ipv4'] is defined and vmfacts['instance']['ipv4'] != ''

- name: Get IP
  set_fact:
    windows_ip: "{{ vmfacts['instance']['ipv4'] }}"

- debug: msg="IP Address - {{ windows_ip }}"   

- name: "Set new windows inventory host group"
  set_fact:
    host_group: 'new_windows'
  when: host_group is not defined or host_group == ''

- name: Add new VM Windows to Ansible Hosts
  add_host:
    name: '{{ windows_ip }}'
    group: '{{ host_group }}'
    ansible_connection: winrm
    ansible_winrm_transport: ntlm
    ansible_winrm_server_cert_validation: ignore
    ansible_user: 'Administrator'
    ansible_password: '{{ vm_password_new }}'

- name: Create local directory 'output'
  ansible.builtin.file:
    path: output
    state: directory
  delegate_to: localhost

- name: Save host IP
  copy:
    dest: "output/{{ vm_name }}_ip.txt"
    content: "{{ windows_ip }}"
  delegate_to: localhost

